// automatically generated by the FlatBuffers compiler, do not modify

package articles

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImageContent struct {
	_tab flatbuffers.Table
}

func GetRootAsImageContent(buf []byte, offset flatbuffers.UOffsetT) *ImageContent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImageContent{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ImageContent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImageContent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ImageContent) Base(obj *Content) *Content {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Content)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ImageContent) Url() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImageContent) Mime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImageContent) Width() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageContent) MutateWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ImageContent) Height() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageContent) MutateHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func ImageContentStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ImageContentAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(base), 0)
}
func ImageContentAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(url), 0)
}
func ImageContentAddMime(builder *flatbuffers.Builder, mime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mime), 0)
}
func ImageContentAddWidth(builder *flatbuffers.Builder, width int32) {
	builder.PrependInt32Slot(3, width, 0)
}
func ImageContentAddHeight(builder *flatbuffers.Builder, height int32) {
	builder.PrependInt32Slot(4, height, 0)
}
func ImageContentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
